<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linz blog</title>
    <link>https://linz1989.github.io/</link>
    <description>Recent content on linz blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Jun 2016 21:01:02 +0800</lastBuildDate>
    <atom:link href="https://linz1989.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AngularJS学习笔记(2)</title>
      <link>https://linz1989.github.io/life/angular-learning-2/</link>
      <pubDate>Mon, 20 Jun 2016 21:01:02 +0800</pubDate>
      
      <guid>https://linz1989.github.io/life/angular-learning-2/</guid>
      <description>&lt;p&gt;第二章讲解的是如何构建与测试。&lt;/p&gt;

&lt;p&gt;MongoLab为数据量在0.5GB以下的数据库提供免费寄存，提供输出JSON格式的REST接口。&lt;/p&gt;

&lt;p&gt;构建系统准则：自动化所有事情；尽早报错，清晰报错；不同的工作流，不同的任务；构建脚本同样是代码。&lt;/p&gt;

&lt;p&gt;AngularJS的测试代码是用Jasmine编写的。Karma runner用于执行JavaScript测试，能够分发源代码和测试代码到浏览器的运行实例上，触发测试的执行，收集输出结果。&lt;/p&gt;

&lt;p&gt;文件命名的约定：所有JavaScript文件使用标准的.js扩展名；子模板文件的后缀是.tpl.html；测试文件和它测试的目标文件命名一致，后缀依靠测试类型不同而不同，单元测试以.spec.js结尾。&lt;/p&gt;

&lt;p&gt;每个文件中应仅定义一个AngularJS模块，这样可以维护相对较小、目标单一的文件和模块。&lt;/p&gt;

&lt;p&gt;angular.module(&amp;lsquo;myModule&amp;rsquo;)可以取回已定义的模块实例，但应避免使用。&lt;/p&gt;

&lt;p&gt;Karma runner的测试子集：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为测试或者测试套件加字母x前缀(xit、xdescribe)，将在下次运行时禁用此测试或者测试套件；&lt;/li&gt;
&lt;li&gt;为测试套件加字母d前缀(ddescribe)，将只运行次套件，而忽略其它测试套件；&lt;/li&gt;
&lt;li&gt;为测试加字母i前缀(iit)，将只运行此测试，而忽略其他测试和测试套件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;angular.mock.dump(object)在控制台打印变量值；简写dump(object)。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记(1)</title>
      <link>https://linz1989.github.io/life/angular-learning-1/</link>
      <pubDate>Sun, 19 Jun 2016 20:08:02 +0800</pubDate>
      
      <guid>https://linz1989.github.io/life/angular-learning-1/</guid>
      <description>&lt;p&gt;最先是买的Angular教程是《用AngularJS开发下一代Web应用》，但发现有的地方写的不够详细，让人很疑惑。&lt;/p&gt;

&lt;p&gt;现在看的教程书籍是《Mastering Web Application Development with AngularJS》,这本书先试读了它的电子版，感觉更适合初学者。&lt;/p&gt;

&lt;p&gt;下面记录的是第一章：《Angular之禅》的笔记。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在Angular中，所有能够被框架理解和解释的特殊HTML标签和属性，称为&lt;strong&gt;指令&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任何引发的视图改变，都会映射在模型上；继而任何模型的改变，也会立刻传播到整个模板——&lt;strong&gt;双向绑定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Angular宣称自己的框架基于&lt;strong&gt;MVW模式(model-view-whatever)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;$scope对象是模板的域模型(domain model),亦即&lt;strong&gt;作用域实例&lt;/strong&gt;。在作用域中定义的属性对所有子作用域都是可见的，只要子作用域没有定义同名属性。&lt;/li&gt;
&lt;li&gt;$parent可以明确地引用父作用域。但应尽量避免使用。&lt;/li&gt;
&lt;li&gt;作用域通常会依赖作用域创建指令而创建和销毁，也可以调用$scope类上的$new()和$destory()方法，手动创建和销毁。&lt;/li&gt;
&lt;li&gt;AngularJS提倡&lt;strong&gt;声明式(declarative)UI结构&lt;/strong&gt;，模板应专注于描述所需要的效果，而非其实现。与命令式编程风格相比，声明式编程无法掌控一切。&lt;/li&gt;
&lt;li&gt;规则：永远不要在AngularJS的控制器中操纵DOM元素；控制器不应全局定义。&lt;/li&gt;
&lt;li&gt;AngularJS拥有内建的依赖注入(Dependency injection, DI)引擎：理解对象对其协作对象的需求；找到所需的协作对象；连接协作对象，以形成功能完备的应用。&lt;/li&gt;
&lt;li&gt;$injector创建的服务对象都是单件(singleton)的，每个运行中的应用，只拥有一个给定服务的实例。&lt;/li&gt;
&lt;li&gt;AngularJS将模块的生命周期分为两个阶段，配置阶段(收集对象创建方案，并进行配置)和运行阶段(执行所有初始化之后的逻辑)。&lt;/li&gt;
&lt;li&gt;模块中的服务对所有其他所有模块都是可见的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AngularJS中注册对象的方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value&lt;/strong&gt;：无法依赖于其他对象，只对非常简单的对象有效。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;service&lt;/strong&gt;：可以依赖注入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;factory&lt;/strong&gt;：任何能够创建对象的函数都可被注册，返回对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;constant&lt;/strong&gt;：常量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;provider&lt;/strong&gt;：通用的注册方法。返回包含$get属性的对象。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>类似Bootstrap的Modal组件实现</title>
      <link>https://linz1989.github.io/programming/modal/</link>
      <pubDate>Wed, 01 Jun 2016 21:11:02 +0800</pubDate>
      
      <guid>https://linz1989.github.io/programming/modal/</guid>
      <description>&lt;p&gt;当前流行的框架Bootstrap的Modal组件风格很不错。模态框从上到下、逐渐浮现到页面前。
&lt;img src=&#34;https://linz1989.github.io/img/content/modal/1.png&#34; alt=&#34;modal截图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是防照其样式自定义的Modal效果：
&lt;img src=&#34;https://linz1989.github.io/img/content/modal/2.png&#34; alt=&#34;modal截图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以下是实现过程。&lt;/p&gt;

&lt;p&gt;以上图修改密码的模态框为例，页面DOM结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;modal&amp;quot; id=&amp;quot;changePwModal&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;h3 class=&amp;quot;header&amp;quot;&amp;gt;修改密码&amp;lt;span&amp;gt;X&amp;lt;/span&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;div class=&amp;quot;content form&amp;quot;&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;用户名：&amp;lt;/label&amp;gt;&amp;lt;input id=&amp;quot;changePw-name&amp;quot; type=&amp;quot;text&amp;quot; maxlength=&amp;quot;30&amp;quot; placeholder=&amp;quot;请输入当前账号&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;旧密码：&amp;lt;/label&amp;gt;&amp;lt;input id=&amp;quot;changePw-currPw&amp;quot; type=&amp;quot;password&amp;quot; maxlength=&amp;quot;30&amp;quot; placeholder=&amp;quot;请输入当前密码&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;新密码：&amp;lt;/label&amp;gt;&amp;lt;input id=&amp;quot;changePw-newPw&amp;quot; type=&amp;quot;password&amp;quot; maxlength=&amp;quot;30&amp;quot; placeholder=&amp;quot;请输入新的密码&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;label&amp;gt;新密码确认：&amp;lt;/label&amp;gt;&amp;lt;input id=&amp;quot;changePw-repeatNewPw&amp;quot; type=&amp;quot;password&amp;quot; maxlength=&amp;quot;30&amp;quot; placeholder=&amp;quot;请再次输入新密码&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;tip&amp;quot;&amp;gt;请输入当前密码！&amp;lt;/span&amp;gt;&amp;lt;a class=&amp;quot;ok&amp;quot;&amp;gt;确定&amp;lt;/a&amp;gt;&amp;lt;a class=&amp;quot;cancel&amp;quot;&amp;gt;取消&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modal样式(scss语法)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div.modal{
  display: none;
  position: fixed;
  left:0;
  top:0;
  right:0;
  bottom:0;
  background-color: rgba(0,0,0,0.5);
  z-index:10;
  opacity: 0;
  @include transition(opacity .15s linear);
  &amp;amp;&amp;gt;div{
    width:600px;
    background-color: #fff;
    margin:12% auto 0;
    border-radius: 4px;
    @include ty(0 5px 15px rgba(0,0,0,.5));
    -webkit-transition: -webkit-transform .3s ease-out;
    -o-transition: -o-transform .3s ease-out;
    transition: transform .3s ease-out;
    -webkit-transform: translate(0,-25%);
    -ms-transform: translate(0,-25%);
    -o-transform: translate(0,-25%);
    transform: translate(0,-25%);
    &amp;amp;&amp;gt;h3.header{
      height:50px;
      line-height: 50px;
      background-color: #293c55;
      padding-left:20px;
      font-size:16px;
      color:#fff;
      &amp;amp;&amp;gt;span{
    float: right;
    margin-right:10px;
    color:#ccc;
    &amp;amp;:hover{
      cursor: pointer;
      color:#eee;
    }
      }
    }
    &amp;amp;&amp;gt;div.footer{
      height:60px;
      border-top:1px solid #d9d9d9;
      text-align: right;
      line-height:60px;
      &amp;amp;&amp;gt;a{
    padding: 8px 22px;
    border: 1px solid #efefef;
    border-radius: 4px;
    cursor: pointer;
    margin-right:15px;
    &amp;amp;.cancel{
      background-color: #f5f5f5;
      color: #666;
      &amp;amp;:hover{
        background-color: #e9e9e9;
      }
    }
    &amp;amp;.ok{
      background-color: rgba(41, 60, 85,0.8);
      color:#fff;
      border-color:rgba(41, 60, 85,0.8);
      &amp;amp;:hover{
        background-color: #293c55;
        border-color: #293c55;
      }
    }
      }
      &amp;amp;&amp;gt;span.tip{
    display: none;
    float: left;
    padding-left: 20px;
    color: #ff6666;
    font-weight: bold;
    &amp;amp;.ok{
      color:#00aa00;
    }
      }
    }
    &amp;amp;&amp;gt;div.content.form{
      &amp;amp;&amp;gt;div{
    margin:15px 10px;
    &amp;amp;&amp;gt;label{
      display: inline-block;
      width:180px;
      text-align: right;
    }
    &amp;amp;&amp;gt;input,select{
      padding:6px 10px;
      width:250px;
    }
    &amp;amp;&amp;gt;select{
      width:270px;
      margin-left:-4px;
    }
    &amp;amp;&amp;gt;span{
      font-weight: bold;
      color:#ff6666;
      margin-left:8px;
    }
      }
    }
  }
  &amp;amp;.active{
    opacity: 1;
    &amp;amp;&amp;gt;div{
      -webkit-transform: translate(0,0);
      -ms-transform: translate(0,0);
      -o-transform: translate(0,0);
      transform: translate(0,0);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;组件定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Modal(ele,option){
    this.ele = ele;
    this.option = option || {};

    var thisModel = this;
    var closeTag = this.ele.find(&amp;quot;div&amp;gt;h3.header&amp;gt;span&amp;quot;),
    cancelBtn = this.ele.find(&amp;quot;div&amp;gt;div.footer&amp;gt;a.cancel&amp;quot;),
    okBtn = this.ele.find(&amp;quot;div&amp;gt;div.footer&amp;gt;a.ok&amp;quot;);
    if(closeTag[0]){
    closeTag.click(function(){ thisModel.close() });
    }
    if(cancelBtn[0]){
    cancelBtn.click(function(){ thisModel.close() });
    }
    if(okBtn[0] &amp;amp;&amp;amp; option.doClickOkBtn){
    okBtn.click(function(){
        option.doClickOkBtn();
    });
    }

    this.tip = this.ele.find(&amp;quot;div&amp;gt;div.footer&amp;gt;span.tip&amp;quot;);
}
Modal.prototype.show = function(){
    this.ele.css(&amp;quot;display&amp;quot;,&amp;quot;block&amp;quot;);
    var ele = this.ele;
    setTimeout(function(){
    ele.addClass(&amp;quot;active&amp;quot;);
    },30);
};
Modal.prototype.close = function(){
    this.ele.removeClass(&amp;quot;active&amp;quot;);
    var ele = this.ele;
    setTimeout(function(){
    ele.css(&amp;quot;display&amp;quot;,&amp;quot;none&amp;quot;);
    },500);
};
Modal.prototype.showTip = function(tipStr,isOk){
    if(this.tip &amp;amp;&amp;amp; this.tip[0]){
    if(tipStr) this.tip.text(tipStr);
    isOk===true ? this.tip.addClass(&amp;quot;ok&amp;quot;) : this.tip.removeClass(&amp;quot;ok&amp;quot;);
    this.tip.show();
    var tipEle = this.tip;
    setTimeout(function(){ tipEle.hide() },3000)
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var changePwModal = new Modal($(&amp;quot;#changePwModal&amp;quot;),{
    doClickOkBtn : function(){
        if(checkChangePwFormValidate()){//校验表单
           ///.....
           changePwModal.showTip(&amp;quot;修改成功！&amp;quot;,true);
           ///.....
           changePwModal.close();//关闭
        }
    }
    });

$(&amp;quot;header&amp;gt;div.link&amp;gt;a:eq(0)&amp;quot;).click(function(){//点击修改密码，modal show
    ///...
    changePwModal.show();
    });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DataTables分页器的生成算法</title>
      <link>https://linz1989.github.io/programming/algorithmOfPagination/</link>
      <pubDate>Sun, 15 May 2016 20:01:01 +0800</pubDate>
      
      <guid>https://linz1989.github.io/programming/algorithmOfPagination/</guid>
      <description>&lt;p&gt;jQuery有一款很好用的表格插件：&lt;a href=&#34;https://www.datatables.net&#34;&gt;DataTables&lt;/a&gt;，对于构建后台管理之类的CRUD应用非常方便。
&lt;img src=&#34;https://linz1989.github.io/img/content/algorithmOfPagination/1.png&#34; alt=&#34;CRUD应用截图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;DataTables的分页器设计的很简约，一排简单的按钮就标示出了当前页、总页数，以及首页、末页、前一页、后一页的导航。当切换页码的时候，分页器按钮上的页码标识随之而变。&lt;/p&gt;

&lt;p&gt;观察发现，除去前一页、后一页按钮，如果总页数不大于7，则页码全部显示出来；否则，页码按钮固定7个，分别是首页和末页、当前页及当前页的左右页、中间页（用&amp;hellip;标识）。当页码属于前4页或者末4页时，连续显示前5加末页或者后5加首页。&lt;/p&gt;

&lt;p&gt;比如总页数29，分页器随着当前页不同而显示如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;当前页&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;页码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、2、3、4、5、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、2、3、4、5、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、2、3、4、5、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、2、3、4、5、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、4、5、6、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、24、25、26、&amp;hellip;、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、25、26、27、28、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、25、26、27、28、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、25、26、27、28、29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1、&amp;hellip;、25、26、27、28、29&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;实现的Pagination如下：&lt;/p&gt;

&lt;p&gt;定义dom容器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;pagination&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;pages&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pagination的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Pagination(ele,option){
    this.ele = ele;//$(&amp;quot;div.pagination&amp;quot;)
    this.option = option || {};
    this.pages = ele.children(&amp;quot;div.pages&amp;quot;);
    var pagObj = this;
    pagObj.pages.on(&amp;quot;click&amp;quot;,&amp;quot;a&amp;quot;,function(){
        if(!/disable/.test(this.className) &amp;amp;&amp;amp; this.innerHTML != &amp;quot;...&amp;quot;){
            var gotoPage = 1;//需要跳转的页码
            if(/prev/.test(this.className)){
                gotoPage = pagObj.currPage-1;
            }
            else if(/next/.test(this.className)){
                gotoPage = pagObj.currPage+1;
            }
            else{
                gotoPage = parseInt(this.innerHTML);
            }
            pagObj.option.switchPage(gotoPage);//回调switchPage
         }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;切换页码时，传入当前页码、总页数两个参数，更新Pagination:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pagination.prototype.refresh = function(option){
    this.currPage = option.currPage;//当前页
    this.totalPage = option.totalPage;//总页数
    var hasPrev = (option.currPage != 1), hasNext = (option.currPage != option.totalPage);
    var htmlStr = &amp;quot;&amp;lt;a class=&#39;prev&amp;quot;+(hasPrev ? &amp;quot;&amp;quot; : &amp;quot; disable&amp;quot;)+&amp;quot;&#39;&amp;gt;&amp;lt;&amp;lt;&amp;lt;/a&amp;gt;&amp;quot;;
    var i;
    if(option.totalPage&amp;lt;=7){
        for(i=1;i&amp;lt;=option.totalPage;i++){
            htmlStr += &amp;quot;&amp;lt;a&amp;quot;+(i==this.currPage ? &amp;quot; class=&#39;curr&#39;&amp;quot; : &amp;quot;&amp;quot;)+&amp;quot;&amp;gt;&amp;quot;+i+&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
        }
    }
    else{
        var posArr = [1,,,,,,option.totalPage],//存放页码
            leftVal = option.currPage-1,
            rightVal = option.currPage+1;
        if(leftVal&amp;lt;3){
            for(i=1;i&amp;lt;=4;i++) posArr[i] = i+1;
            posArr[5] = &amp;quot;...&amp;quot;;
        }
        else if(option.totalPage-rightVal&amp;lt;3){
            for(i=5;i&amp;gt;=2;i--) posArr[i] = posArr[i+1]-1;
            posArr[1]=&amp;quot;...&amp;quot;;
        }
        else{
            posArr[1] = &amp;quot;...&amp;quot;;
            posArr[2] = leftVal;
            posArr[3] = option.currPage;
            posArr[4] = rightVal;
            posArr[5] = &amp;quot;...&amp;quot;;
        }
        for(i=0;i&amp;lt;posArr.length;i++){
            htmlStr +=&amp;quot;&amp;lt;a&amp;quot;+(posArr[i]==option.currPage ? &amp;quot; class=&#39;curr&#39;&amp;quot; : &amp;quot;&amp;quot;)+&amp;quot;&amp;gt;&amp;quot;+posArr[i]+&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;;
        }
    }
    htmlStr +=&amp;quot;&amp;lt;a class=&#39;next&amp;quot;+(hasNext ? &amp;quot;&amp;quot; : &amp;quot; disable&amp;quot;)+&amp;quot;&#39;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;quot;;
    this.pages.html(htmlStr);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var pagination = new Pagination($(&amp;quot;div.pagination&amp;quot;),{
        switchPage : function(page){
            console.log(&amp;quot;switch page：&amp;quot;+page);
        }
});
pagination.refresh({ currPage : 1 , totalPage : 10});//更新显示
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>关于赣州统计信息网前端页面的重构</title>
      <link>https://linz1989.github.io/life/gztjjweb-about/</link>
      <pubDate>Wed, 11 May 2016 21:05:12 +0800</pubDate>
      
      <guid>https://linz1989.github.io/life/gztjjweb-about/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.gztj.gov.cn/&#34;&gt;赣州统计信息网&lt;/a&gt;是赣州统计局的官方网站。2014年大学同学介绍做的私下项目，当时对于构建web还只是菜鸟级别(现在稍微有点长进)。&lt;/p&gt;

&lt;p&gt;后台按要求使用Java实现，摒弃了jsp，前端是纯粹的html，数据交互使用ajax。&lt;/p&gt;

&lt;p&gt;这个网站主要是发布新闻资讯，解答访问者的咨询，公布一些信息。文章发布是核心，大约占据了90%的网站内容。因此提供了一个管理者后台，方便对栏目文章的管理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/1.png&#34; alt=&#34;管理者后台&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/2.png&#34; alt=&#34;管理者后台&#34; /&gt;&lt;/p&gt;

&lt;p&gt;样式使用流行的bootstrap，文本编辑器使用百度的&lt;a href=&#34;http://ueditor.baidu.com/website/&#34;&gt;UEditor&lt;/a&gt;，整体风格还可以。网站前台页面做的有些欠缺，这是当时的风格：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/3.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要有以下弊端：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首页有时白屏，对于每个类型的文章都有一次ajax请求，请求过多；&lt;/li&gt;
&lt;li&gt;固定宽度布局，非响应式；&lt;/li&gt;
&lt;li&gt;每个页面的菜单、底部友情链接代码是一样的；当有改动的时候，每个页面都要改，维护麻烦；&lt;/li&gt;
&lt;li&gt;页面样式粗放；&lt;/li&gt;
&lt;li&gt;js插件及css加载过多，未做优化；&lt;/li&gt;
&lt;li&gt;缺少UV统计，虽然明知浏览量不会很多；&lt;/li&gt;
&lt;li&gt;文章打印效果不行。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对上面的问题，重构了整个网站页面，主要有以下改进：&lt;/p&gt;

&lt;p&gt;1.后台使用储存过程，一次性将首页需要的不同类型的文章信息加载出来。在良好的网络环境下，加载一百多篇文章(除去了内容)信息只花了286ms；而之前是分成十多次请求才完成；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/4.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2.页面改成相应式布局，最大是1440px，最小是320px的布局；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/5.png&#34; alt=&#34;网站页面&#34; style=&#34;max-width:360px&#34;/&gt;&lt;/p&gt;

&lt;p&gt;3.使用gulp自动化构建工具；样式使用sass全部重写；图标转成base64形式，进一步减少请求；
&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/9.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.js插件加载优化。首页的图表组件、高德地图API都是延迟加载；&lt;/p&gt;

&lt;p&gt;5.赣州地图旧版是用flex/flash做出来的，现改用高德地图实现，更清晰的感觉；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/6.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6.为网站增加了百度统计；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/7.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7.改进了文章的打印效果；&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://linz1989.github.io/img/content/gztjjweb/8.png&#34; alt=&#34;网站页面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;目前来说网站页面还有很多可以改进的地方，虽然赣州统计信息网只是个小网站。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://linz1989.github.io/about/</link>
      <pubDate>Tue, 10 May 2016 21:28:02 +0800</pubDate>
      
      <guid>https://linz1989.github.io/about/</guid>
      <description>&lt;p&gt;一名普通的Programmer，2011年计算机科学与技术专业毕业。接触过Flex&amp;amp;Java等技术，目前专注于Web前端开发，就职于深圳石豆软件。&lt;/p&gt;

&lt;p&gt;业余喜欢历史、音乐。看起来一副永远不成熟的样子。不善言辞。&lt;/p&gt;

&lt;p&gt;博客是用Hugo创建的，主要是想记录自己的技术成长历程。&lt;/p&gt;

&lt;p&gt;页面样式相比原主题“hugo-pacman-theme”，改动了很多，主要是色调方面，整体布局并没有多大变化。如何搭建可以参考CoderZh的这篇文章：&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“生命可以随心所欲，但不能随波逐流”一语出自动漫大师宫崎骏，头像也出自宫崎骏的作品《悬崖上的金鱼公主》。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>