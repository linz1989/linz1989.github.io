<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lives on linz blog</title>
    <link>https://linz1989.github.io/life/</link>
    <description>Recent content in Lives on linz blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 19 Jun 2016 20:08:02 +0800</lastBuildDate>
    <atom:link href="https://linz1989.github.io/life/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AngularJS学习笔记(1)</title>
      <link>https://linz1989.github.io/life/angular-learning-1/</link>
      <pubDate>Sun, 19 Jun 2016 20:08:02 +0800</pubDate>
      
      <guid>https://linz1989.github.io/life/angular-learning-1/</guid>
      <description>&lt;p&gt;最先是买的Angular教程是《用AngularJS开发下一代Web应用》，但发现有的地方写的不够详细，让人很疑惑。&lt;/p&gt;

&lt;p&gt;现在看的教程书籍是《Mastering Web Application Development with AngularJS》,这本书先试读了它的电子版，感觉更适合初学者。&lt;/p&gt;

&lt;p&gt;下面记录的是第一章：《Angular之禅》的笔记。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在Angular中，所有能够被框架理解和解释的特殊HTML标签和属性，称为&lt;strong&gt;指令&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任何引发的视图改变，都会映射在模型上；继而任何模型的改变，也会立刻传播到整个模板——&lt;strong&gt;双向绑定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Angular宣称自己的框架基于&lt;strong&gt;MVW模式(model-view-whatever)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;$scope对象是模板的域模型(domain model),亦即&lt;strong&gt;作用域实例&lt;/strong&gt;。在作用域中定义的属性对所有子作用域都是可见的，只要子作用域没有定义同名属性。&lt;/li&gt;
&lt;li&gt;$parent可以明确地引用父作用域。但应尽量避免使用。&lt;/li&gt;
&lt;li&gt;作用域通常会依赖作用域创建指令而创建和销毁，也可以调用$scope类上的$new()和$destory()方法，手动创建和销毁。&lt;/li&gt;
&lt;li&gt;AngularJS提倡&lt;strong&gt;声明式(declarative)UI结构&lt;/strong&gt;，模板应专注于描述所需要的效果，而非其实现。与命令式编程风格相比，声明式编程无法掌控一切。&lt;/li&gt;
&lt;li&gt;规则：永远不要在AngularJS的控制器中操纵DOM元素；控制器不应全局定义。&lt;/li&gt;
&lt;li&gt;AngularJS拥有内建的依赖注入(Dependency injection, DI)引擎：理解对象对其协作对象的需求；找到所需的协作对象；连接协作对象，以形成功能完备的应用。&lt;/li&gt;
&lt;li&gt;$injector创建的服务对象都是单件(singleton)的，每个运行中的应用，只拥有一个给定服务的实例。&lt;/li&gt;
&lt;li&gt;AngularJS将模块的生命周期分为两个阶段，配置阶段(收集对象创建方案，并进行配置)和运行阶段(执行所有初始化之后的逻辑)。&lt;/li&gt;
&lt;li&gt;模块中的服务对所有其他所有模块都是可见的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AngularJS中注册对象的方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value&lt;/strong&gt;：无法依赖于其他对象，只对非常简单的对象有效。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;service&lt;/strong&gt;：可以依赖注入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;factory&lt;/strong&gt;：任何能够创建对象的函数都可被注册，返回对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;constant&lt;/strong&gt;：常量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;provider&lt;/strong&gt;：通用的注册方法。返回包含$get属性的对象。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>